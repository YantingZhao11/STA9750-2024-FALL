---
title: "Final Project"
editor: visual
---

```{r echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"


#Run and clean the datas
if(!require("tidytext")) install.packages("tidytext")
library(tidytext)

if(!require("RColorBrewer")) install.packages("RColorBrewer")
library(RColorBrewer)

if(!require("lubridate")) install.packages("lubridate")
library(lubridate)

  if(!require("stringr")) install.packages("stringr")
library(stringr)

if(!require("gt")) install.packages("gt")
library(gt)

  if(!require("dplyr")) install.packages("dplyr")
library(dplyr)

 if(!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)

 if(!require("tidyverse")) install.packages("tidyverse")
library (tidyverse)
  
  if(!require("DT")) install.packages("DT")
library(DT)

mtaincident_file <- function(filepath) {
  as.data.frame(readr::read_csv(filepath, lazy = FALSE, show_col_types = FALSE))
}


path <- "C:\\Users\\w3038\\Downloads\\STA 9750\\Final Project\\MTA_Subway_Major_Incidents__Beginning_2020_20241026.csv"


mtaincident <- mtaincident_file(path)

# Clean the data by removing empty rows in 'line' column
mtaincident <- mtaincident %>%
  filter(line != "", line != "Systemwide") %>%
  mutate(division = case_when(
    division == "A DIVISION" ~ "Number Line",
    division == "B DIVISION" ~ "Letter Line",
    TRUE ~ division  # Retain other values
  ))

```

```{r echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"


#Monthly Complaints by Category Over Time
# First, convert the 'month' column to a Date format if not already done
mtaincident$month <- as.Date(mtaincident$month, format = "%m/%d/%Y")

# Aggregate the data to get total complaints by month and category
monthly_category_complaints <- mtaincident %>%
  group_by(month, category) %>%
  summarise(total_complaints = sum(count)) %>%
  ungroup()

# Plot the stacked area chart
stacked_area_chart <- ggplot(monthly_category_complaints, aes(x = month, y = total_complaints, fill = category)) +
  geom_area(alpha = 0.8, color = "black", size = 0.2) +
  labs(title = "Monthly Complaints by Category Over Time",
       x = "Month",
       y = "Total Complaints",
       fill = "Complaint Category") +
  theme_minimal() +
  scale_fill_brewer(palette = "Set3") +  # Choose a color palette for clarity
  theme(plot.title = element_text(hjust = 0.5))

# Display the plot
stacked_area_chart

```

```{r echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"

# Load and clean MTA incident data
mtaincident$month <- as.Date(mtaincident$month)  # Ensure month column is in Date format

# Filter data for COVID (2020-2021) and post-COVID (2022-2024) periods
covid_data <- mtaincident %>%
  filter(month >= as.Date("2020-01-01") & month < as.Date("2022-01-01"))

post_covid_data <- mtaincident %>%
  filter(month >= as.Date("2022-01-01") & month < as.Date("2025-01-01"))

# Calculate total incidents by line and division for COVID period
line_incident_covid <- covid_data %>%
  group_by(line, division) %>%
  summarise(total_incident = sum(count, na.rm = TRUE)) %>%
  arrange(desc(total_incident))

# Calculate total incidents by line and division for post-COVID period
line_incident_post <- post_covid_data %>%
  group_by(line, division) %>%
  summarise(total_incident = sum(count, na.rm = TRUE)) %>%
  arrange(desc(total_incident))

# Combine COVID and post-COVID datasets for mirrored plotting
line_incidents_combined <- bind_rows(
  line_incident_covid %>% mutate(period = "COVID (2020-2021)"),
  line_incident_post %>% mutate(period = "Post-COVID (2022-2024)")
)

# Separate data by division
number_line_data <- line_incidents_combined %>%
  filter(division == "Number Line")

letter_line_data <- line_incidents_combined %>%
  filter(division == "Letter Line")

# Create mirrored chart for Number Line
number_line_graph <- ggplot(number_line_data, aes(x = reorder(line, total_incident), y = ifelse(period == "COVID (2020-2021)", -total_incident, total_incident), fill = period)) +
  geom_bar(stat = "identity", position = "identity") +
  geom_text(aes(label = abs(total_incident)), 
            position = position_stack(vjust = 0.5), 
            color = "black", 
            size = 3.5) +  # Display total incidents as text
  scale_y_continuous(labels = abs) +  # Show absolute values on y-axis
  labs(title = "Total Incidents by Number Line (COVID vs. Post-COVID)",
       x = "Subway Line",
       y = "Total Incidents") +
  theme_minimal() +
  coord_flip() +
  theme(plot.title = element_text(hjust = 0.5)) +
  scale_fill_manual(values = c("lightblue", "lightgreen"))

# Create mirrored chart for Letter Line
letter_line_graph <- ggplot(letter_line_data, aes(x = reorder(line, total_incident), y = ifelse(period == "COVID (2020-2021)", -total_incident, total_incident), fill = period)) +
  geom_bar(stat = "identity", position = "identity") +
  geom_text(aes(label = abs(total_incident)), 
            position = position_stack(vjust = 0.5), 
            color = "black", 
            size = 3.5) +  # Display total incidents as text
  scale_y_continuous(labels = abs) +  # Show absolute values on y-axis
  labs(title = "Total Incidents by Letter Line (COVID vs. Post-COVID)",
       x = "Subway Line",
       y = "Total Incidents") +
  theme_minimal() +
  coord_flip() +
  theme(plot.title = element_text(hjust = 0.5)) +
  scale_fill_manual(values = c("lightblue", "lightgreen"))

# Display the plots
print(number_line_graph)
print(letter_line_graph)

```

```{r echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"

library(scales)

# Calculate total incidents for each category during the COVID period (2020-2021)
covid_incident_reasons <- mtaincident %>%
  filter(month >= as.Date("2020-01-01") & month < as.Date("2022-01-01")) %>%
  group_by(category) %>%
  summarise(total_incidents = sum(count, na.rm = TRUE)) %>%
  mutate(percentage = total_incidents / sum(total_incidents) * 100)

# Plot pie chart for COVID period
covid_pie <- ggplot(covid_incident_reasons, aes(x = "", y = total_incidents, fill = category)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar("y", start = 0) +
  geom_text(aes(label = paste0(round(percentage, 1), "%")), 
            position = position_stack(vjust = 0.5), color = "white") +
  labs(title = "Incident Reasons During COVID Period (2020-2021)", fill = "Incident Category") +
  theme_void() +
  theme(plot.title = element_text(hjust = 0.5))

# Display COVID pie chart
print(covid_pie)

# Calculate total incidents for each category during the post-COVID period (2022-2024)
post_covid_incident_reasons <- mtaincident %>%
  filter(month >= as.Date("2022-01-01") & month < as.Date("2025-01-01")) %>%
  group_by(category) %>%
  summarise(total_incidents = sum(count, na.rm = TRUE)) %>%
  mutate(percentage = total_incidents / sum(total_incidents) * 100)

# Plot pie chart for post-COVID period
post_covid_pie <- ggplot(post_covid_incident_reasons, aes(x = "", y = total_incidents, fill = category)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar("y", start = 0) +
  geom_text(aes(label = paste0(round(percentage, 1), "%")), 
            position = position_stack(vjust = 0.5), color = "white") +
  labs(title = "Incident Reasons Post-COVID Period (2022-2024)", fill = "Incident Category") +
  theme_void() +
  theme(plot.title = element_text(hjust = 0.5))

# Display post-COVID pie chart
print(post_covid_pie)



```
```{r}

# Define reasons for incidents
incident_reasons <- c("Other", "Persons on Track/Police/Medical", "Signals", 
                      "Stations and Structure", "Subway Car", "Track")

# Create separate datasets for COVID (2020-2021) and post-COVID (2022-2024)
covid_data <- mtaincident %>%
  filter(month >= as.Date("2020-01-01") & month < as.Date("2022-01-01")) %>%
  filter(category %in% incident_reasons)

post_covid_data <- mtaincident %>%
  filter(month >= as.Date("2022-01-01") & month < as.Date("2025-01-01")) %>%
  filter(category %in% incident_reasons)

# Get top 5 lines per incident reason during COVID
top5_lines_covid <- covid_data %>%
  group_by(category, line) %>%
  summarise(total_incidents = sum(count, na.rm = TRUE), .groups = "drop") %>%
  arrange(category, desc(total_incidents)) %>%
  group_by(category) %>%
  slice_max(total_incidents, n = 5) %>%
  ungroup()

# Get top 5 lines per incident reason post-COVID
top5_lines_post_covid <- post_covid_data %>%
  group_by(category, line) %>%
  summarise(total_incidents = sum(count, na.rm = TRUE), .groups = "drop") %>%
  arrange(category, desc(total_incidents)) %>%
  group_by(category) %>%
  slice_max(total_incidents, n = 5) %>%
  ungroup()

# Plot COVID data
covid_bar_graph <- ggplot(top5_lines_covid, aes(x = reorder(line, total_incidents), y = total_incidents, fill = line)) +
  geom_bar(stat = "identity") +
  facet_wrap(~ category, scales = "free_y") +
  labs(title = "Top 5 Subway Lines by Incident Reason (COVID Period 2020-2021)",
       x = "Subway Line",
       y = "Total Incidents") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5)) +
  coord_flip()

# Plot Post-COVID data
post_covid_bar_graph <- ggplot(top5_lines_post_covid, aes(x = reorder(line, total_incidents), y = total_incidents, fill = line)) +
  geom_bar(stat = "identity") +
  facet_wrap(~ category, scales = "free_y") +
  labs(title = "Top 5 Subway Lines by Incident Reason (Post-COVID Period 2022-2024)",
       x = "Subway Line",
       y = "Total Incidents") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5)) +
  coord_flip()

# Display graphs
print(covid_bar_graph)
print(post_covid_bar_graph)

# Combine data for table
summary_table_data <- top5_lines_covid %>%
  rename(COVID_Total_Incidents = total_incidents) %>%
  left_join(top5_lines_post_covid %>% rename(Post_COVID_Total_Incidents = total_incidents), 
            by = c("category", "line")) %>%
  arrange(category, desc(COVID_Total_Incidents))

# Create a gt table for summary
summary_gt_table <- summary_table_data %>%
  gt() %>%
  tab_header(
    title = "Top Subway Lines by Incident Reason During COVID and Post-COVID"
  ) %>%
  cols_label(
    category = "Incident Reason",
    line = "Subway Line",
    COVID_Total_Incidents = "COVID Total Incidents",
    Post_COVID_Total_Incidents = "Post-COVID Total Incidents"
  ) %>%
  fmt_number(
    columns = c(COVID_Total_Incidents, Post_COVID_Total_Incidents),
    decimals = 0
  ) %>%
  tab_options(
    table.width = px(800)
  )

# Display gt table
summary_gt_table

```
```{r}
# Combine datasets and add a period column for COVID and post-COVID
covid_data_summary <- top5_lines_covid %>%
  mutate(period = "COVID")

post_covid_data_summary <- top5_lines_post_covid %>%
  mutate(period = "Post-COVID")

combined_data <- bind_rows(covid_data_summary, post_covid_data_summary)


# Grouped Bar Chart with Facets for Each Incident Reason
grouped_bar_chart <- ggplot(combined_data, aes(x = reorder(line, -total_incidents), y = total_incidents, fill = period)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~ category, scales = "free_y") +
  labs(title = "Top 5 Subway Lines by Incident Reason (COVID vs Post-COVID)",
       x = "Subway Line",
       y = "Total Incidents",
       fill = "Period") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5)) +
  coord_flip()

# Display the grouped bar chart
print(grouped_bar_chart)

```

```{r echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"
#| 
# Create borough mapping based on your updated list
borough_data <- data.frame(
  line = c("1", "1", "2", "2", "3", "3", "4", "4", "4", "5", 
           "5", "6", "6", "7", "7", "A", "A", "B", "B", "B", 
           "C", "C", "D", "D", "D", "E", "E", "F", "F", "F", 
           "G", "G", "J", "J", "Z", "Z", "L", "L", "N", "N", 
           "N", "Q", "Q", "R", "R", "R", "S Rock", "S Fkln", "S 42nd"),
  borough = c("Manhattan", "Bronx", "Brooklyn", "Manhattan", 
              "Brooklyn", "Manhattan", "Manhattan", "Brooklyn", 
              "Bronx", "Brooklyn", "Manhattan", "Manhattan", 
              "Bronx", "Manhattan", "Queens", "Manhattan", 
              "Brooklyn", "Brooklyn", "Bronx", "Manhattan", 
              "Manhattan", "Brooklyn", "Brooklyn", "Manhattan", 
              "Bronx", "Queens", "Manhattan", "Manhattan","Queens", "Brooklyn", 
              "Queens", "Brooklyn", "Manhattan", "Queens", 
              "Manhattan", "Queens", "Manhattan", "Brooklyn", 
              "Queens", "Manhattan", "Brooklyn", "Manhattan", 
              "Brooklyn", "Queens", "Manhattan", "Brooklyn", 
              "Manhattan", "Brooklyn", "Manhattan")
)

# Define line groups for pre-COVID and post-COVID
pre_covid_lines <- c("6", "7", "E", "F", "N")
post_covid_lines <- c("2", "6", "E", "F", "N")

# Filter the borough data for pre-COVID lines
pre_covid_boroughs <- borough_data %>%
  filter(line %in% pre_covid_lines)

# Filter the borough data for post-COVID lines
post_covid_boroughs <- borough_data %>%
  filter(line %in% post_covid_lines)

# Count occurrences of each borough across the pre-COVID lines
pre_covid_borough_counts <- pre_covid_boroughs %>%
  group_by(borough) %>%
  summarise(count = n()) %>%
  arrange(desc(count))

# Count occurrences of each borough across the post-COVID lines
post_covid_borough_counts <- post_covid_boroughs %>%
  group_by(borough) %>%
  summarise(count = n()) %>%
  arrange(desc(count))

# Create a gt table for pre-COVID borough counts
pre_covid_table <- pre_covid_borough_counts %>%
  gt() %>%
  tab_header(title = "Frequency of Boroughs for Pre-COVID Subway Lines") %>%
  cols_label(borough = "Borough", count = "Incident Count") %>%
  fmt_number(columns = vars(count), decimals = 0) %>%
  tab_options(table.width = pct(100))

# Create a gt table for post-COVID borough counts
post_covid_table <- post_covid_borough_counts %>%
  gt() %>%
  tab_header(title = "Frequency of Boroughs for Post-COVID Subway Lines") %>%
  cols_label(borough = "Borough", count = "Incident Count") %>%
  fmt_number(columns = vars(count), decimals = 0) %>%
  tab_options(table.width = pct(100))

# Display the gt tables
pre_covid_table
post_covid_table
```