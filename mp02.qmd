---
title: "Insights for Successful Hollywood Film Development and Proposal"
---
The Hollywood movie industry is constantly seeking fresh and innovative ideas for films that captivate audiences and achieve commercial success. Traditionally, this has involved acquiring rights to life stories, securing production options for promising novels, or adapting established intellectual property (IP) into films. However, in recent years, this process has been criticized for its over-reliance on sequels and predictable storylines. To combat this trend and inspire new content, this report aims to leverage data-driven insights to identify key factors that contribute to the success of films. By analyzing past successes, failures, and the contributions of top filmmakers and actors, we hope to generate creative and informed ideas for future films.

*The data used for this project is a condensed, smaller size to ensure efficient processing.

```{r echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"

  if(!require("stringr")) install.packages("stringr")
library(stringr)

if(!require("gt")) install.packages("gt")
library(gt)

  if(!require("dplyr")) install.packages("dplyr")
library(dplyr)

 if(!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)

 if(!require("tidyverse")) install.packages("tidyverse")
library (tidyverse)
  
  if(!require("DT")) install.packages("DT")
library(DT)

get_imdb_file <- function(fname, path){
    fname_ext <- file.path(path, paste0(fname, "_small.csv"))
    as.data.frame(readr::read_csv(fname_ext, lazy=FALSE, show_col_types = FALSE))
}

path <- "C:\\Users\\w3038\\Downloads\\STA 9750"

NAME_BASICS      <- get_imdb_file("name_basics", path)
TITLE_BASICS     <- get_imdb_file("title_basics", path)
TITLE_CREW       <- get_imdb_file("title_crew", path)
TITLE_EPISODES   <- get_imdb_file("title_episodes", path)
TITLE_PRINCIPALS <- get_imdb_file("title_principals", path)
TITLE_RATINGS <- get_imdb_file("title_ratings", path)

NAME_BASICS <- NAME_BASICS |> 
    filter(str_count(knownForTitles, ",") > 1)

TITLE_RATINGS <- TITLE_RATINGS |>
    filter(numVotes >= 100)

TITLE_BASICS <- TITLE_BASICS |>
    semi_join(TITLE_RATINGS, 
              join_by(tconst == tconst))

TITLE_CREW <- TITLE_CREW |>
    semi_join(TITLE_RATINGS, 
              join_by(tconst == tconst))


TITLE_PRINCIPALS <- TITLE_PRINCIPALS |>
    semi_join(TITLE_RATINGS, join_by(tconst == tconst))


```

For preprocessing the data, I corrected the column types in the IMDb dataset using `mutate` with functions like `as.numeric` and `as.logical`. In the `NAME_BASICS` table, you converted birth and death years to numeric formats. In the `TITLE_BASICS` table, you transformed columns such as `isAdult` to logical and `runtimeMinutes` to numeric. Similarly, you adjusted `seasonNumber` and `episodeNumber` in the `TITLE_EPISODES` table.

Lastly, I created a function to display a sample of 1,000 rows for the following tables:
```{r echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"

#Task#1

  NAME_BASICS <- NAME_BASICS |>
    mutate(birthYear = as.numeric(birthYear),
           deathYear = as.numeric(deathYear))

  TITLE_BASICS <- TITLE_BASICS |>
    mutate(isAdult = as.logical(as.numeric(isAdult)),
           startYear = as.numeric(startYear),
           endYear = as.numeric(endYear),
           runtimeMinutes = as.numeric(str_replace_all(runtimeMinutes, "[^0-9]", "")))

  TITLE_EPISODES <- TITLE_EPISODES |>
    mutate(seasonNumber = as.numeric(seasonNumber),
           episodeNumber = as.numeric(episodeNumber))

  # Function to display a sample of 1000 rows from each table
  display_sample <- function(data, table_name) {
    sample_data <- data[sample(nrow(data), min(1000, nrow(data))), ]  # Sample 1000 rows or fewer if the dataset is smaller
    datatable(sample_data, options = list(pageLength = 10))  
  }


```

## NAME_BASICS
```{r echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"

NAME_BASICS_sample <- display_sample(NAME_BASICS, "NAME_BASICS")
NAME_BASICS_sample  
```

## TITLE_BASICS
```{r echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"
TITLE_BASICS_sample <- display_sample(TITLE_BASICS, "TITLE_BASICS")
TITLE_BASICS_sample 
```

## TITLE_EPISODES
```{r echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"
TITLE_EPISODES_sample <- display_sample(TITLE_EPISODES, "TITLE_EPISODES")
TITLE_EPISODES_sample 
```

## TITLE_RATINGS
```{r echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"
TITLE_RATINGS_sample <- display_sample(TITLE_RATINGS, "TITLE_RATINGS")
TITLE_RATINGS_sample  
```

## TITLE_CREWS
```{r echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"
TITLE_CREW_sample <- display_sample(TITLE_CREW, "TITLE_CREW")
TITLE_CREW_sample 
```

## TITLE_PRINCIPALS
```{r echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"
TITLE_PRINCIPALS_sample <- display_sample(TITLE_PRINCIPALS, "TITLE_PRINCIPALS")
TITLE_PRINCIPALS_sample 


```
## Initial Exploration

### 1. Media Count
Upon an initial look at the data, the total count of movies,TV series and TV episodes is as follows:
```{r echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"
#Task2.1 How many movies are in our data set? How many TV series? How many TV episodes?

num_movies <- TITLE_BASICS |>
  filter(titleType == "movie") |>
  count()

num_tv_series <- TITLE_BASICS |>
  filter(titleType == "tvSeries") |>
  count()

num_tv_episodes <- TITLE_BASICS |>
  filter(titleType == "tvEpisode") |>
  count()

result_table <- tibble(
  Category = c("Movies", "TV Series", "TV Episodes"),
  Count = c(num_movies$n, num_tv_series$n, num_tv_episodes$n)
)

result_table %>%
  gt() %>%
  tab_header(title = "Media Count") %>%
  fmt_number(
    columns = vars(Count),
    decimals = 0
  )

```
### 2. Oldest Living Person
In terms of notable individuals, the oldest living person in our dataset is:
```{r echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"

#Task2.2 Who is the oldest living person in our data set?
current_year = 2024
oldest_living_person <- NAME_BASICS |>
  filter(is.na(deathYear)) |>
  filter(birthYear >= (current_year - 124)) |>
  arrange(birthYear) |>
  select(- nconst,
         - knownForTitles) |>
  slice(1)

oldest_living_person |>
  gt() |>
  tab_header(title = "Oldest Living Person")


```
### 3. TV Episode with a Perfect 10/10 Rating and 200K+ Votes
Moreover, when examining TV episodes, we find that the one with a perfect **10/10 rating** and **227,589 IMDb ratings** is
```{r echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"
#Task2.3There is one TV Episode in this data set with a perfect 10/10 rating and 200,000 IMDb ratings. What is it? What series does it belong to?

perfect_episode <- TITLE_RATINGS |>
  filter(averageRating == 10, numVotes > 200000) |>
  left_join(TITLE_BASICS, by = "tconst") |>
  filter(titleType == "tvEpisode") |>
  select(primaryTitle, titleType, genres, numVotes) |>
  arrange(desc(numVotes))  

perfect_episode |>
  gt() |>
  tab_header(
    title = "TV Episode with a Perfect 10/10 Rating and 200K+ Votes"
  ) |>
  cols_label(
    primaryTitle = "Episode Title",
    titleType = "Title Type",
    genres = "Genres",
    numVotes = "Number of Votes"
  )

```
### 4. Top Four Projects of Mark Hamill
Furthermore, the actor **Mark Hamill** is renowned for his work in the following projects:
```{r echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"
#Task2.4What four projects is the actor Mark Hammill most known for?


mark_hamill <- NAME_BASICS |>
  filter(primaryName == "Mark Hamill")

if(nrow(mark_hamill) > 0) {
  mark_hamill_nconst <- mark_hamill$nconst}

known_projects <- TITLE_PRINCIPALS |>
    filter(nconst == mark_hamill_nconst) |>
    inner_join(TITLE_BASICS, by = "tconst") |>
    distinct(tconst, .keep_all = TRUE) |>  
    select(primaryTitle, titleType) |>
    arrange(desc(titleType)) |> 
    slice(1:4)  
  

  known_projects |>
    gt() |>
    tab_header(
      title = "Top Four Projects of Mark Hamill"
    ) |>
    cols_label(
      primaryTitle = "Project Title",
      titleType = "Type of Project"
    ) |>
    tab_options(
      table.width = pct(100)  # Set table width to 100%
    )

```
### 5. TV Series with More Than 12 Episodes and Highest Average Rating
Additionally, when considering series with extensive episode counts, the one with the highest average rating is:
```{r echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"
#Task#2.5 What TV series, with more than 12 episodes, has the highest average rating?


episode_counts <- TITLE_EPISODES |>
  group_by(parentTconst) |>
  summarise(episode_count = n(), .groups = 'drop')


average_ratings <- episode_counts |>
  inner_join(TITLE_RATINGS, by = c("parentTconst" = "tconst")) |>
  inner_join(TITLE_BASICS, by = c("parentTconst" = "tconst")) |>
  filter(titleType == "tvSeries") |>
  select(seriesTitle = primaryTitle, episode_count, averageRating)


filtered_series <- average_ratings |>
  filter(episode_count > 12)


top_series <- filtered_series |>
  arrange(desc(averageRating)) |>
  slice(1)

top_series |>
    gt() |>
    tab_header(
      title = "TV Series with More Than 12 Episodes and Highest Average Rating"
    ) |>
    cols_label(
      seriesTitle = "Series Title",
      episode_count = "Number of Episodes",
      averageRating = "Average Rating"
    ) |>
    tab_options(
      table.width = pct(100)  
    )
```
### 6. Average Ratings for Early and Later Seasons of Happy Days
Lastly, regarding classic television, *Happy Days* (1974-1984) brings us to an intriguing discussion about its ratings. The average ratings for the seasons are as follows:
```{r echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"
#Task2.6 Is it true that episodes from later seasons of Happy Days have lower average ratings than the early seasons?
happy_days_tconst <- TITLE_BASICS |>
  filter(primaryTitle == "Happy Days") |>
  select(tconst)

happy_days_episodes <- TITLE_EPISODES |>
  filter(parentTconst %in% happy_days_tconst$tconst) |>
  inner_join(TITLE_RATINGS, by = "tconst") |>
  mutate(seasonNumber = as.integer(seasonNumber))


happy_days_episodes <- happy_days_episodes |>
  mutate(season_group = ifelse(seasonNumber <= 5, "Early", "Later"))


average_ratings <- happy_days_episodes |>
  group_by(season_group) |>
  summarise(average_rating = mean(averageRating, na.rm = TRUE), .groups = 'drop')


average_ratings |>
  gt() |>
  tab_header(
    title = "Average Ratings for Early and Later Seasons of Happy Days"
  ) |>
  cols_label(
    season_group = "Season Group",
    average_rating = "Average Rating"
  ) |>
  tab_options(
    table.width = pct(100)  
  )

```
Is it true that episodes from later seasons of *Happy Days* have lower average ratings than the early seasons? The data clearly indicates that **later seasons** do, indeed, have lower average ratings than the **early seasons**.

## Analysis of Movie Success Metrics

**success score** is defined as a composite metric that incorporates both the average rating and the number of votes a movie receives. Specifically, it is calculated using the formula:

**Success Score = (0.7 * Average Rating) + (0.3 * log(Number of Votes))**

This weighting gives greater importance to the average rating while still considering the volume of votes, which helps to account for the credibility of the rating. This approach allows us to evaluate movies more comprehensively, ensuring that both quality and popularity are reflected in our scoring system.

### 1. Top 10 Successful Movies (Based on Success Score)  
The following movies emerged as the top successful films based on our success score metric:
```{r echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"
# Define the success score as a new metric using mutate
TITLE_RATINGS <- TITLE_RATINGS %>%
  mutate(successScore = (0.7 * averageRating) + (0.3 * log(numVotes)))

# Question 1: Choose the top 5-10 movies based on the success metric
top_successful_movies <- TITLE_RATINGS %>%
  inner_join(TITLE_BASICS, by = "tconst") %>%
  filter(titleType == "movie") %>%
  arrange(desc(successScore)) %>%
  select(primaryTitle, averageRating, numVotes, successScore, startYear) %>%
  head(10)

top_successful_movies %>%
  gt() %>%
  tab_header(
    title = "Top 10 Successful Movies (Based on Success Score)"
  )

```
### 2. Low Scoring Movies (Low Success Score)  
In contrast, we identified several movies that received a large number of IMDb votes yet scored poorly on our success metric:
```{r echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"
# Question 2: Choose 3-5 movies with large numbers of votes but low success score
poorly_rated_movies <- TITLE_RATINGS %>%
  filter(successScore < 6, numVotes > 100000) %>%  # Threshold for low success
  inner_join(TITLE_BASICS, by = "tconst") %>%
  filter(titleType == "movie") %>%
  select(primaryTitle, averageRating, numVotes, successScore, startYear) %>%
  arrange(successScore) %>%
  head(5)

ggplot(poorly_rated_movies, aes(x = reorder(primaryTitle, successScore), y = successScore)) +
  geom_bar(stat = "identity", fill = "lightblue") +
  geom_text(aes(label = sprintf("%.2f", successScore)), hjust = -0.1, size = 3.5) +  # Display two decimal places
  coord_flip() +  # Flip the axes for better readability
  labs(title = "Low Scoring Movies with High Votes", 
       x = "Movie Title", 
       y = "Success Score") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5))

```
### 3. Top Christopher Nolan Movies (Based on Success Score)  
When examining the works of Christopher Nolan, we found that he has several projects that score highly on our success metric:
```{r echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"

# Question 3: Christopher Nolan's projects and their success scores

nolan_nconst <- NAME_BASICS %>%
  filter(primaryName == "Christopher Nolan") %>%
  select(nconst)


nolan_projects <- TITLE_CREW %>%
  filter(grepl(nolan_nconst$nconst, directors)) %>%
  select(tconst)

nolan_ratings <- nolan_projects %>%
  inner_join(TITLE_RATINGS, by = "tconst") %>%
  inner_join(TITLE_BASICS, by = "tconst") %>%
  filter(titleType == "movie") %>%
  arrange(desc(successScore))


nolan_ratings %>%
  select(primaryTitle, averageRating, numVotes, successScore) %>%
  slice(1:10) %>%
  gt() %>%
  tab_header(
    title = "Top Christopher Nolan Movies (Based on Success Score)"
  )
```
### 4 - 5. Movies Above Success Threshold  
Lastly, we established a threshold for projects to be considered a ‘success,’ identifying those movies that exceed a success score of **9.89**:
```{r echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"


filtered_movies <- TITLE_RATINGS %>%
  filter(averageRating >= 8.0, numVotes >= 100000)  # Adjust minimum criteria as needed

success_threshold <- quantile(filtered_movies$successScore, 0.75, na.rm = TRUE)

#Filter movies above the new success threshold
successful_movies_threshold <- filtered_movies %>%
  filter(successScore > success_threshold) %>%
  inner_join(TITLE_BASICS, by = "tconst") %>%
  filter(titleType == "movie") %>%
  select(primaryTitle, averageRating, numVotes, successScore)

successful_movies_threshold %>%
  head(10) %>%
  gt() %>%
  tab_header(
    title = paste("Movies Above Success Threshold (>", success_threshold, ")")
  )

```

## Examining Success by Genre and Decade

In preparation for my next project, I’ll examine and analyze the genre trends in success over the decade and also the most successful genres since 2010.

```{r echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"
#Task4.1What was the genre with the most “successes” in each decade?
# Add a 'decade' column to TITLE_BASICS
TITLE_BASICS <- TITLE_BASICS %>%
  mutate(decade = floor(startYear / 10) * 10)

# Filter for movies above success threshold (>7.30)
successful_movies <- TITLE_RATINGS %>%
  filter(successScore > success_threshold) %>%
  inner_join(TITLE_BASICS, by = "tconst") %>%
  filter(titleType == "movie")

# Group
success_by_genre_decade <- successful_movies %>%
  separate_rows(genres, sep = ",") %>% # Split multiple genres
  group_by(decade, genres) %>%
  summarize(success_count = n(), .groups = 'drop') %>%
  arrange(desc(success_count))


library(ggplot2)

ggplot(success_by_genre_decade, aes(x = decade, y = success_count, fill = genres)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Top Genres with Most Successes Per Decade", x = "Decade", y = "Success Count") +
  theme_minimal()



```
## Genre with the Most “Successes” by Decade
The Top Genres with Most Successes Per Decade bar graph indicates that:\

1. Drama and Adventure consistently lead in producing successful films throughout the decades.
Notably, Drama shows a significant surge in success during the late 1990s and early 2000s.
2. Consistency of Success Across Genres

## Drama emerges as the most consistent genre in generating successes over the years.
Conversely, genres like Western and War, which were more prevalent in earlier decades, have experienced a decline in successful productions, suggesting a shift in audience preferences.
```{r echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"

# Filter for movies since 2010
recent_successes <- successful_movies %>%
  filter(startYear >= 2010) %>%
  separate_rows(genres, sep = ",") %>%
  group_by(genres) %>%
  summarize(success_count = n(), .groups = 'drop') %>%
  arrange(desc(success_count))


ggplot(recent_successes, aes(x = reorder(genres, -success_count), y = success_count)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  labs(title = "Most Successful Genres Since 2010", x = "Genres", y = "Success Count") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```
## Most Successful Genres Since 2010
From the Most Successful Genres Since 2010 bar graph:\

1. Drama leads with the highest number of successes, followed closely by Adventure and Action.
2. To assess the success rate, it is essential to compare the number of successes against the total productions in these genres during this period. A high number of productions coupled with a lower success count may indicate a less favorable success rate.

## Popular Genres in Recent Years
The analysis reveals that:\

1. Drama has gained popularity in recent years, evidenced by its high success count since 2010.
2. Additionally, both Adventure and Action genres have seen a notable increase in successful films, suggesting a trend towards more engaging, action-oriented storytelling.
\
Based on the findings from the analysis, Drama is recommended as a promising genre for future film projects due to its consistent success across decades. However, exploring Adventure or Action genres may also be beneficial, given their significant audience appeal and success in recent years.

## Pitch for Drama Movie 

For the upcoming drama film, we are bringing together a powerhouse team with a proven track record of success. With **Aaron Paul** and **Bob Odenkirk** as lead actors and **Christopher Nolan** directing, we are confident that this combination of talent will result in a critically acclaimed and commercially successful film.

**Aaron Paul** is an actor renowned for his dramatic range, having earned widespread acclaim for his performance in *Breaking Bad*. With **16 successful projects** to his credit, Paul's ability to portray deeply emotional and complex characters makes him a perfect fit for a dramatic role in this project. His experience in television and film ensures he can carry a film to success with both critics and audiences.

**Bob Odenkirk**, also with **16 successful projects**, is a dynamic actor known for his versatility. While he initially gained fame in comedy, his breakout role in *Better Call Saul* revealed his dramatic chops. Odenkirk’s transition to serious roles has resonated with audiences, and pairing him with Paul again promises to rekindle the chemistry they shared, ensuring compelling on-screen performances.

**Christopher Nolan**, with **5 successful projects** as a director, is a visionary storyteller who excels in delivering high-concept dramas with deep emotional core. Known for films like *Inception*, *Dunkirk*, and *Interstellar*, Nolan’s unique approach to narrative structure and character development makes him an ideal director for this drama project. His reputation for creating visually stunning and intellectually stimulating films is sure to attract both critical attention and box-office success.

```{r echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"


target_genre <- "Drama"

#filter by success threshold
successful_movies <- TITLE_BASICS %>%
  inner_join(TITLE_RATINGS, by = "tconst") %>%
  filter(grepl(target_genre, genres) & successScore > success_threshold) %>%
  select(tconst, primaryTitle)

#identify directors
successful_directors <- TITLE_PRINCIPALS %>%
  filter(tconst %in% successful_movies$tconst & category == "director") %>%
  select(tconst, nconst) %>%
  inner_join(NAME_BASICS, by = "nconst") %>%
  group_by(primaryName) %>%
  summarise(success_count = n(), .groups = 'drop') %>%
  arrange(desc(success_count)) %>%
  top_n(1)


#identify actors
successful_actors <- TITLE_PRINCIPALS %>%
  filter(tconst %in% successful_movies$tconst & category == "actor") %>%
  select(tconst, nconst) %>%
  inner_join(NAME_BASICS, by = "nconst") %>%
  group_by(primaryName) %>%
  summarise(success_count = n(), .groups = 'drop') %>%
  arrange(desc(success_count)) %>%
  top_n(2)

director_table <- successful_directors %>%
  gt() %>%
  tab_header(
    title = "Top Successful Director in Drama"
  ) %>%
  cols_label(
    primaryName = "Director Name",
    success_count = "Successful Movies Count"
  )

# Create GT table for successful actors
actor_table <- successful_actors %>%
  gt() %>%
  tab_header(
    title = "Top Successful Actors in Drama"
  ) %>%
  cols_label(
    primaryName = "Actor Name",
    success_count = "Successful Movies Count"
  )

# Display the tables
director_table
actor_table
```

This combination of actors and director, each with a wealth of experience and accolades in the drama genre, positions this project for a strong reception. The collaboration of these talented individuals, with their history of success, will no doubt create a compelling, memorable drama that resonates with viewers.

```{r echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"

#join tables
filtered_movies_with_basics <- filtered_movies %>%
  inner_join(TITLE_BASICS, by = "tconst")

#filters
high_rating_threshold <- 8.0
min_votes_threshold <- 50000
classic_movie_year <- 25  # We want movies that haven't been remade in the past 25 years

classic_movies <- filtered_movies_with_basics %>%
  filter(averageRating >= high_rating_threshold,
         numVotes >= min_votes_threshold,
         successScore >= success_threshold,  
         startYear < (2024 - classic_movie_year),
         titleType == "movie")  

#Check if any remakes have been made in the last 25 years
recent_movies <- TITLE_BASICS %>%
  filter(startYear >= (2024 - classic_movie_year))  # Movies made in the last 25 years

#Exclude any classic movies that have been remade in the last 25 years
remade_movies <- recent_movies %>%
  select(tconst) %>%
  distinct()

#Modify anti_join to use tconst correctly
classic_movies_no_remakes <- classic_movies %>%
  anti_join(remade_movies, by = "tconst")  # Exclude movies that have been remade

#find key personnel (actors, directors, writers) in classic movies
classic_movie_personnel <- TITLE_PRINCIPALS %>%
  filter(tconst %in% classic_movies_no_remakes$tconst) %>%
  select(tconst, nconst, category) %>%
  inner_join(NAME_BASICS, by = "nconst")

#check if key personnel are still alive
living_personnel <- classic_movie_personnel %>%
  filter(is.na(deathYear))  

#display classic movies and their living personnel for potential remake
classic_movies_selected <- classic_movies_no_remakes %>%
  inner_join(living_personnel, by = "tconst")

classic_movies_selected %>%
  select(primaryTitle, startYear, averageRating, numVotes, successScore, primaryName, birthYear, deathYear, category) %>%
  arrange(desc(averageRating), desc(successScore), desc(numVotes)) %>%
  head(1) %>%
  gt() %>%
  tab_header(
    title = "Top Classic Movie for Remake"
  ) %>%
  cols_label(
    primaryTitle = "Title",
    startYear = "Year",
    averageRating = "IMDb Rating",
    numVotes = "Votes",
    successScore = "Success Score",
    primaryName = "Personnel Name",
    birthYear = "Born",
    deathYear = "Died",
    category = "Role"
  ) %>%
  fmt_number(
    columns = vars(averageRating, successScore),
    decimals = 2
  ) %>%
  fmt_number(
    columns = vars(numVotes),
    decimals = 0
  )
```

## Elevator Pitch: "The Shawshank Redemption" Remake

Our next project is a high-stakes remake of **"The Shawshank Redemption" (1994)**, one of the most beloved drama films in history, with an IMDb rating of **9.3** and over **2.9 million votes**. With no remakes in the last 25 years, this classic is ripe for a revival, and we have assembled a dream team to deliver it to a new generation.

Starring **Aaron Paul** and **Bob Odenkirk**, two actors with **16 successful projects** each, their on-screen chemistry from *Breaking Bad* and *Better Call Saul* will bring a new dynamic to the characters of Andy and Red. **Aaron Paul’s** raw emotional depth and **Bob Odenkirk’s** nuanced transition from comedy to drama make them a perfect fit for the lead roles.

Helming the project is **Christopher Nolan**, a director known for creating visually stunning, emotionally rich narratives. With **5 successful projects**, Nolan’s reputation for blending intricate storytelling with character-driven plots will breathe fresh life into the powerful themes of hope, resilience, and friendship at the heart of this story. Nolan's signature style and deep emotional resonance are sure to captivate both new audiences and long-time fans.

This film will combine nostalgia with a modern sensibility, promising a fresh yet faithful take on the original story. With the potential involvement of **Tim Robbins** in a cameo, we also bring a nod to the classic while attracting new viewers. This remake is poised to dominate the box office and receive critical acclaim.
